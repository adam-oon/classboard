name: Classboard CI/CD

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out Code
        uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: '1.15'
      - name: Create .env file
        run: |
          touch .env
          echo DB_USER=${{ secrets.DB_USER }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_IP=${{ secrets.DB_IP }} >> .env
          echo DB_SCHEMA=${{ secrets.DB_SCHEMA }} >> .env
      - name: Setup MySQL DB
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql database: ${{ secrets.DB_SCHEMA }} # Default value is "test".
          mysql root password: ${{ secrets.DB_PASSWORD }} # Required if "mysql user" is empty, default is empty.
          mysql user: ${{ secrets.DB_USER }} # Required if "mysql root password" is empty, default is empty. The superuser for the specified database.
          mysql password: ${{ secrets.DB_PASSWORD }} # Required if "mysql user" exists.
      - name: Install Dependencies For Testing
        id: install_deps
        run: |
          go get github.com/jstemmer/go-junit-report
      - name: Sleep for 10 seconds # wait to allow docker run completely
        uses: jakejarvis/wait-action@master
        with:
          time: '10s' 
      - name: Create sql file
        id: write_sql_file
        uses: timheuer/base64-to-file@v1
        with:
          fileName: 'classboard.sql' # use ${{ steps.write_sql_file.outputs.filePath }} to retrieve file
          encodedString: ${{ secrets.SQL }} 
      - if: success()
        name: Import SQL
        run: |
          docker exec -i $(docker ps -q) sh -c 'exec mysql --protocol tcp -u${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }}' < ${{ steps.write_sql_file.outputs.filePath }}
      - name: Run Tests
        run: |
          go test -v ./... | go-junit-report > report.xml
      - if: ${{failure()}}
        name: Create Issues
        uses: nashmaniac/create-issue-action@v1.1
        with:
          title: Test Failed
          token: ${{secrets.GITHUB_TOKEN}}
          assignees: ${{github.actor}}
          labels: worflow-failed
          body: Workflow failed for commit ${{github.sha}} @ ${{github.ref}}        
      - name: Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1.5
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: report.xml
